{"example-note":{"slug":"example-note","filePath":"example-note.md","title":"Example Title","links":[],"tags":["example-tag"],"content":""},"golang/golang-resources":{"slug":"golang/golang-resources","filePath":"golang/golang resources.md","title":"Golang Resources","links":[],"tags":["golang"],"content":"Websites\nGo\nGophercises\nGo by Example\nGo Proverbs\nYoutube\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChannel nameDescriptionLinkMelkeyMainly posts Golang videosLinkDreams of CodeA lot of Golang but also covers other topics and languagesLinkAlex MuxNew channel!LinkNet NinjaFree courses on a lot of topics. Limited Golang coursesLinkTaigoGolang videosLinkCode &amp; LearnLarge catalog of Golang videosLinkFlo WoelkiLarge catalog of Golang videosLink\nBlogs\nAlex Edwards"},"index":{"slug":"index","filePath":"index.md","title":"Howdy üëãüèΩ","links":[],"tags":[],"content":"Welcome to my technical notes website!"},"kubernetes/Kubernetes-Beginner-to-Pro-Course":{"slug":"kubernetes/Kubernetes-Beginner-to-Pro-Course","filePath":"kubernetes/Kubernetes Beginner to Pro Course.md","title":"Kubernetes - Beginner to Pro Course","links":[],"tags":["kubernetes"],"content":"Kubernetes: Beginner to Pro course by DevOps Directive\nüîó Link\nüîó Video\nGeneral Notes\n\nDiscovered a new tool called devbox that allows you to create portable and isolated dev environments locally (instead of something that runs in the cloud like Gitpod)\n\nTechnology Overview\nCluster - The set of resources that make up the kubernetes systems (made up of nodes)\nNode - A computer/server. Multiple nodes are joined together to create a cluster.\nControl Plane - Subset of nodes that perform system tasks (control &amp; manage Kubernetes deployment)\nData Plane - Nodes that carry out user workloads (databases, api endpoints, etc.)\nKubernetes System Components\nMultiple smaller parts make the overall Kubernetes platform:\n\netcd - key-value store used for storing all cluster data. Serves as the source of truth for the cluster state and configuration\nkube-apiserver - frontend for Kubernetes control plane\nkube-scheduler - Schedules pods onto appropriate nodes based on availability\nkube-controller-manager - runs controller processes. Each controller is a separate process that manages routine tasks (e.g. maintaining desired state of resources, managing replication, handling node operations, etc.)\ncloud-controller-manager - integrates with underlying cloud provider. Handles things like load balances, storage and networking\nkubelet - Agent on each worker node. Manages container lifecycle within pods\nkube-proxy - Network proxy on each node. Maintains network rules to allow communication to and from pods\n\n\nkubectl\nkubectl is the Kubernetes CLI tool.\nExample commands:\n\nkubectl explain [RESOURCE_TYPE] - shows all the fields that need to be specified for a particular resource. This can also be used to see the fields for a subfield of the resource, e.g. kubectl explain Mamespace.metadata\nkubectl get namespaces - Show all namespaces within a cluster\nkubectl create namespace NAMESPACE_NAME - Create a namespace in the cluster\nkubectl apply -f Namepsace.yaml - Apply the namespace config specified in the file ‚ÄòNamespace.yaml‚Äô to the cluster\nkubectl delete namespace NAMESPACE_NAME - Delete the namespace\nkubectl delete -f Namespace.yaml - See above\n\nKubernetes Resources\nNamespace\n\nA mechanism to group resources within a cluster\nThey can be used to organise applications by assigning a namespace to them (e.g the service.auth app might be added to a namespace called ‚Äòauth‚Äô)\nThere are 4 initial namespaces created by the system: `default, kube-system, kube-node-lease and kube-public\nBy default, namespaces do not act as a network/security boundary\nBest practise is to create new namespaces for each application\n\nPod\n\nSmallest smallest deployable unit\nRepresents a running process on a cluster and encapsulates an app container, storage resources, a unique network IP, and options that given how the containers(s) should run\nNote - In the real world as a developer, you never create pods manually. Usually interact with higher level resources (e.g. Deployments and Jobs)\nCan have init containers and sidecar containers\n\nReplicaSet\n\nAllows the replication of pods\nUsually never creating a ReplicaSet directly\nLabels are the link between ReplicaSets and Pods\n\nDeployments\n\nAdds the concept of ‚Äòrollouts‚Äô and ‚Äòrollbacks‚Äô\nUsed for long-running stateless apps\nDeployments are the next level up the chain from ReplicaSets\n\nService\n\nAn internal load balancer across replicas\nUses pod labels to determine which pods to serve\nService types:\n\nClusterID: Internal to the cluster\nNodePort: Listens on each node in cluster\nLoadBalancer: Provisions external load balancer\n\n\n"},"kubernetes/Kubernetes":{"slug":"kubernetes/Kubernetes","filePath":"kubernetes/Kubernetes.md","title":"Kubernetes","links":["kubernetes/Kubernetes-Beginner-to-Pro-Course"],"tags":["kubernetes"],"content":"\nKubernetes is an open-source container orchestration platform that automates the deployment, scaling and management of containerized applications.\nKubernetes has become the standard for container orchestration due to widespread adoption, a large active community, and the ability to handle complex, multi-tiered applications.\n\nLinks to other pages\nüîó Kubernetes Beginner to Pro Course"}}